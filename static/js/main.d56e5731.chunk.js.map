{"version":3,"sources":["component/world-map/world.svg","component/world-map/world-map.js","domain/country/country.store.js","component/details/details.js","component/country-info/country-info.js","domain/covid-19/covid-19.store.js","container/world-info/world-info.js","store/root.reducer.js","domain/country/country.service.js","domain/covid-19/covid-19.service.js","store/root.saga.js","store/store.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","WorldMap","map","onCountryClick","src","world","innerRef","element","alt","data-uk-svg","onLoad","callback","querySelectorAll","forEach","country","countryCode","getAttribute","countryName","addEventListener","countrySaga","getCountrySummary","findByCountryCode","findCountry","action","call","payload","all","put","type","findCountryDetailsByName","name","error","getCountryDetails","findDetailsByCountryName","findCountryDetails","description","takeEvery","Details","text","children","modalRef","useRef","className","role","title","onClick","UIkit","current","show","ref","data-uk-modal","data-uk-close","preStyle","whiteSpace","wordWrap","CountryInfo","flag","nativeName","capital","Intl","NumberFormat","format","population","style","details","covid19Saga","findAll","fetchSuccess","getAll","findAllStats","stats","getGlobalStats","WorldInfo","useSelector","state","countryStats","alpha2Code","covid19","toUpperCase","dispatch","useDispatch","useEffect","data-uk-grid","code","FindCountryByCode","JSON","stringify","rootReducer","combineReducers","fetch","then","response","json","article","query","pages","Object","keys","extract","Promise","url","result","countries","totals","reduce","country_code","original","confirmed","deaths","recovered","confirmed_percentage","total_confirmed","rootSaga","countryService","covid19Service","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","sagaMiddleware","createSagaMiddleware","createStore","applyMiddleware","run","App","store","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.d56e5731.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/world.6f8c208a.svg\";","import React from 'react';\nimport world from './world.svg';\nimport SVG from 'react-inlinesvg'\nimport PropTypes from 'prop-types';\n\n\nexport function WorldMap({onCountryClick}) {\n  let map;\n  const mapRef = element => {\n    map = element;\n  };\n\n  return (\n    <SVG src={world} innerRef={mapRef} alt=\"World Map\" data-uk-svg={true}\n         onLoad={() => addCountryClickHandler(map, onCountryClick)}/>\n  );\n}\n\nfunction addCountryClickHandler(element, callback) {\n  element.querySelectorAll('path').forEach(country => {\n    const countryCode = country.getAttribute('data-id');\n    const countryName = country.getAttribute('data-name');\n    country.addEventListener('click', () => callback(countryCode, countryName));\n  });\n}\n\nWorldMap.propTypes = {\n  onCountryClick: PropTypes.func\n};\n","import { all, call, put, takeEvery } from '@redux-saga/core/effects';\n\nconst findCountryByCode = '[country] [query] by code';\n\nexport function FindCountryByCode(code) {\n  return {\n    type: findCountryByCode,\n    payload: code\n  };\n}\n\nconst fetchCountrySuccess = '[country] [fetch] [success]';\nconst fetchCountryFailed = '[country] [fetch] [failure]';\n\nfunction getCountrySummary(findByCountryCode) {\n  return function* findCountry(action) {\n    try {\n      const country = yield call(findByCountryCode, action.payload);\n\n      yield all([\n        put({\n          type: findCountryDetailsByName,\n          payload: country.name\n        }),\n        put({\n          type: fetchCountrySuccess,\n          payload: country\n        })\n      ]);\n    } catch (e) {\n      yield put({\n        ...action,\n        type: fetchCountryFailed,\n        error: e\n      });\n    }\n  }\n}\n\nconst findCountryDetailsByName = '[country details] [query]';\nconst fetchCountryDetailsSuccess = '[country details] [fetch] [success]';\nconst fetchCountryDetailsFailure = '[country details] [fetch] [failure]';\n\nfunction getCountryDetails(findDetailsByCountryName) {\n  return function* findCountryDetails(action) {\n    try {\n      const description = yield call(findDetailsByCountryName, action.payload);\n      yield put({\n        type: fetchCountryDetailsSuccess,\n        payload: description\n      });\n    } catch (e) {\n      yield put({\n        ...action,\n        type: fetchCountryDetailsFailure,\n        error: e\n      });\n    }\n  }\n}\n\nexport function* countrySaga({findByCountryCode, findDetailsByCountryName}) {\n  yield takeEvery(findCountryByCode, getCountrySummary(findByCountryCode));\n  yield takeEvery(findCountryDetailsByName, getCountryDetails(findDetailsByCountryName));\n}\n\nexport default function CountryReducer(state = {}, action) {\n  switch (action.type) {\n    case fetchCountrySuccess:\n      return {...state, ...action.payload};\n    case fetchCountryDetailsSuccess:\n      return {...state, details: action.payload};\n    default:\n      return state;\n  }\n}\n","import React, { useRef } from 'react';\nimport * as UIkit from 'uikit';\n\nexport function Details({text= 'Details', children}) {\n  const modalRef = useRef();\n\n  return (\n    <>\n      <button className=\"uk-button uk-button-default\" role=\"button\" title=\"View country details\" onClick={() => UIkit.modal(modalRef.current).show()}>\n        {text}\n      </button>\n      <div ref={modalRef} role=\"dialog\" className=\"uk-modal-container uk-flex-top\" data-uk-modal={true}>\n        <div className='uk-modal-dialog uk-margin-auto-vertical uk-padding-small'>\n          {children}\n          <button className=\"uk-modal-close-full uk-close-large\" role=\"button\" title=\"Close view country details\" data-uk-close={true}/>\n        </div>\n      </div>\n    </>\n  );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Details } from '../details/details';\n\nconst preStyle = {\n  whiteSpace: 'pre-wrap',\n  wordWrap: 'break-word'\n};\n\nexport function CountryInfo({country = {}}) {\n  return (country.name ? <>\n    <img src={country.flag} alt={`Flag of ${country.name}`} className=\"uk-box-shadow-xlarge\"/>\n    <h1 className='uk-heading-small'>{country.nativeName}</h1>\n    <dl className=\"uk-description-list\">\n      <dt>English Name</dt>\n      <dd>{country.name}</dd>\n      <dt>Capital</dt>\n      <dd>{country.capital}</dd>\n      <dt>Population</dt>\n      <dd>{new Intl.NumberFormat().format(country.population)}</dd>\n    </dl>\n    <Details>\n      <h1 className='uk-heading-small'>{country.name}</h1>\n      <pre style={preStyle}>{country.details}</pre>\n    </Details>\n  </> : null);\n}\n\nCountryInfo.propTypes = {\n  country: PropTypes.exact({\n    name: PropTypes.string,\n    capital: PropTypes.string,\n    population: PropTypes.string,\n    nativeName: PropTypes.string,\n    flag: PropTypes.string,\n    details: PropTypes.string\n  }).isRequired\n};\n","import { call, put, takeEvery } from '@redux-saga/core/effects';\n\nconst findAll = '[covid-19] [query] all';\n\nexport function LoadCovid19Stats() {\n  return {\n    type: findAll,\n  };\n}\n\nconst fetchSuccess = '[covid-19] [fetch] [success]';\nconst fetchFailed = '[covid-19] [fetch] [failure]';\n\nfunction getAll(findAllStats) {\n  return function* (action) {\n    try {\n      const stats = yield call(findAllStats);\n\n      yield put({\n        type: fetchSuccess,\n        payload: stats\n      });\n    } catch (e) {\n      yield put({\n        ...action,\n        type: fetchFailed,\n        error: e\n      });\n    }\n  }\n}\n\nexport function* covid19Saga({getGlobalStats}) {\n  yield takeEvery(findAll, getAll(getGlobalStats))\n}\n\nexport default function Covid19Reducer(state = {}, action) {\n  if (action.type === fetchSuccess) {\n    return action.payload;\n  } else {\n    return state;\n  }\n}\n","import { WorldMap } from '../../component/world-map/world-map';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { FindCountryByCode } from '../../domain/country/country.store';\nimport { CountryInfo } from '../../component/country-info/country-info';\nimport { LoadCovid19Stats } from '../../domain/covid-19/covid-19.store';\n\nexport function WorldInfo() {\n  const country = useSelector(state => state.country);\n  const countryStats = useSelector(state => country.alpha2Code && state.covid19[country.alpha2Code.toUpperCase()]);\n\n  const dispatch = useDispatch();\n  const findCountryByCode = code => dispatch(FindCountryByCode(code));\n  useEffect(() => { dispatch(LoadCovid19Stats()) }, [dispatch]);\n\n  return (\n    <div className=\"uk-grid-match uk-padding\" data-uk-grid={true}>\n      <div className=\"uk-width-2-3@m\">\n        <div className=\"uk-card uk-card-default uk-card-body\">\n          <WorldMap onCountryClick={findCountryByCode}/>\n        </div>\n      </div>\n      <div className=\"uk-width-1-3@m\">\n        <div className=\"uk-card uk-card-default uk-card-body\">\n          <CountryInfo country={country}/>\n          <pre>\n            {JSON.stringify(countryStats, null, 2)}\n          </pre>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { combineReducers } from 'redux';\nimport country from '../domain/country/country.store';\nimport covid19 from '../domain/covid-19/covid-19.store'\n\nexport const rootReducer = combineReducers({\n  country,\n  covid19\n});\n","export function findByCountryCode(countryCode) {\n  return fetch(`https://restcountries.eu/rest/v2/alpha/${countryCode}`)\n    .then(response => response.json());\n}\n\nexport function findDetailsByCountryName(countryName) {\n  return fetch(`https://en.wikipedia.org/w/api.php?action=query&titles=${countryName}&format=json&origin=*&prop=extracts&explaintext&exintro&redirects=1`)\n    .then(response => response.json())\n    .then(article => article.query.pages[Object.keys(article.query.pages)[0]].extract)\n}\n","export function getGlobalStats() {\n  const proxy = 'http://localhost:8080';\n  return Promise.all([\n    'http://health-api.com/api/v1/covid-19/all',\n    'http://health-api.com/api/v1/covid-19/total'\n  ].map(url => `${proxy}/${url}`)\n    .map(url => fetch(url)))\n    .then(response => Promise.all(response.map(result => result.json())))\n    .then(([countries, totals]) => countries.reduce((map, country) => {\n      if (map[country.country_code]) {\n        const original = map[country.country_code];\n        map[country.country_code] = {\n          ...country,\n          state: '',\n          confirmed: original.confirmed + country.confirmed,\n          deaths: original.deaths + country.deaths,\n          recovered: original.recovered + country.recovered,\n        }\n      } else {\n        map[country.country_code] = country\n      }\n      const stats = map[country.country_code];\n      stats.confirmed_percentage = stats.confirmed / totals.total_confirmed;\n\n      return map;\n    }, {}))\n}\n","import * as countryService from '../domain/country/country.service';\nimport { countrySaga } from '../domain/country/country.store';\nimport * as covid19Service from '../domain/covid-19/covid-19.service';\nimport { covid19Saga } from '../domain/covid-19/covid-19.store';\nimport { all } from '@redux-saga/core/effects';\n\nexport function* rootSaga() {\n  yield all([\n    countrySaga(countryService),\n    covid19Saga(covid19Service)\n  ]);\n}\n","import { rootReducer } from './root.reducer';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { rootSaga } from './root.saga';\n\nconst initialState = {\n  country: {}\n};\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst sagaMiddleware = createSagaMiddleware();\n\nexport default createStore(rootReducer, initialState, composeEnhancers(applyMiddleware(sagaMiddleware)));\n\nsagaMiddleware.run(rootSaga);\n","import React from 'react';\nimport { WorldInfo } from './container/world-info/world-info';\nimport { Provider } from 'react-redux';\nimport store from './store/store';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <WorldInfo />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport '../node_modules/uikit/dist/js/uikit.min'\nimport '../node_modules/uikit/dist/js/uikit-core.min'\nimport '../node_modules/uikit/dist/js/uikit-icons.min'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}